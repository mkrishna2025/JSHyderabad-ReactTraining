x -> local state variable -> {this.state.x}
x -> passed in variable -> {this.props.x}
x -> pure block level variable -> {x}

class TestComponent 
	render() {
		const {a, b, c} = this.props;
		
	}
	
class ExtendedComponent -> a, b, c to TestComponent 
	-> <TestComponent a="1" b="2" c="3" />
	-> <TestComponent a={this.props.a} b={this.props.b} c={this.props.c} />
	-> <TestComponent {...this.props}/>
	-> var { d: valueD, ...rest} = this.props;
	    <TestComponent {...rest}/>
	
class ExtendedComponent2 -> a, b, c, d
	<ExtendedComponent a="1" b="2" c="3" d="4" />
	

class Test extends React.component{
	render(){
		return (
			<div {...this.props}>{this.props.children}</div>
		);
	}
}
<Test style={{font-size: 20 }}>
	Welcome to Demo
	<li>React</li>
	<li>React Native</li>
</Test>

class MasterScreen extends React.component{
	render(){
		return (
			<div>
				</Header>
				{this.props.children}
				</Footer>
			</div>
		);
	}
}

<MasterScreen>
	Welcome to Demo
	<li>React</li>
	<li>React Native</li>
</MasterScreen>

this.props.children

class Test2 extends React.Component{
	render() { return <div>{this.props.userName}</div>}
}

class Test3 extends React.Component{
	render() { 
		return (
			<div>{this.props.userName}</div>
		);
	}
}
Test3.defaultProps = { 
	userName: 'GuestUser', 
	userId: -1
};

<Test3 userName="Krishna"/> -> this.props.userName will be Krishna 
<Test3 /> -> this.props.userName will be GuestUser

class TextBox extends React.Component {
	render(){
		return (
			<input type="text" style={{font-size: 20 }} />
		);
	}
}
<TextBox />
class Button extends React.Component {
	render(){
		return (
			<input type="button" style={{font-size: 20 }} />
		);
	}
}
<Button />

class UIElement extends React.Component{
	render(){
		return (
			<input type={this.props.type} style={this.props.style} />
		);
	}
}
<UIElement type="text" style={{font-size: 20 }}/>
<UIElement type="button" style={{font-size: 20 }}/>
class UIElement extends React.Component{
	render(){
		return (
			<input {...this.props} />
		);
	}
}



var element = new UIElement();
element.type = "text";

Routing
npm install react-navigation 
npm install react-navigation --save


npm install PreferencePackage --save
react-native link

import { StackNavigator } from 'react-navigation';

var routes = {
  StartUp:{ screen: StartUpScreen, navigationOptions: { title: 'Startup' } }
}
var routes = {
  Screen1:{ screen: Component1, navigationOptions: {} },
  Screen2:{ screen: Component2, navigationOptions: {} }
}
var stackOptions = {
	initialRouteName: 'Screen2'
}
const Navigations = StackNavigator(routes, stackOptions);
export default class Demo extends React.Component {
    render(){
        return (
            <Navigator />
        )
    }
}

import { TabNavigator }  from 'react-navigation';


Backed Call
fetch(options).done(successCallBack).catch(failedCallBack);

line1
fetch({url: 'http://www.google.com'}).done((response) => console.log(response))
				.catch((exception) => console.log(exception))
line3
line4
line5

var successCallBack = (respone) => { return response1;}
var successCallBack2 = (response1) => { return response2;}
var successCallBack3 = (response2) => { return response3;}
var successCallBack4 = (response3) => { return response4;}
var successCallBack5 = (response4) => { Alert.alert(response4)}
fetch(options).done(successCallBack)
			.done(successCallBack2)
			.done(successCallBack3)
			.done(successCallBack4)
			.done(successCallBack5)
			.catch(failedCallBack);
			
const x1 = this.props.x1;
const x2 = this.props.x2;
const x3 = this.props.x3;
const x4 = this.props.x4;

const { x1, x2, x3, x4 } = this.props;
const { x1,
		x2,
		x3,
		x4 } = this.props;

ES5
var Calculator = function(){
	this.addition = function(x,y) return x + y;
}
module.exports = Calculator;
var Calculator = require('./calculator.js')

ES6
class Calculator{
	addition(x, y){ return x+y;}
}
export default Calculator
import Calculator from './calculator.js';

react-native
	Babel
	TypeScript


StateFul Component
class TestComponent extends React.Component {
	render(){
		var { userName, city} = this.props;
		return (
			<div>Welcome to {city} {userName}</div>
		);
	}
}

StateLess Component -> dont extend React.Component and dont use keywords like this, props
const TestComponent({ userName, city }) => (
	<div>Welcome to {city} {userName}</div>
);

I can point to file
I can point to a folder -> index.js will be picked up.


LifeCycle
	constructor -> default values
	componentWillMount -> subcriptions. ex: device registering to Firebase
	render
	componentDidMount -> 
	componentWillUnMount -> deregistering the subcriptions, clearing the resources or memory
	
class RestaurantScreen extends React.Component {
	constructor(props){
		super(props);
		this.state = {
			inProgress: false;
			restaurants: []
		}
	}
	componentWillMount(){
		// register this device to Firebase
	}
	async componentDidMount() {
		this.setState({inProgress: true});
		// Asynchronous
		fetch(...).done((response) => respone.json())
				.done((responseJson) => {
					this.setState({ restaurants: responseJson.data, inProgress: false });
				}).catch((exception) => {});
				
		// Synchronous
		var restaurants = await fetch(...);
	}
	render(){
		if(this.props.inProgress) {
			return (<div> Please wait.. loading...</div>);
		} else {
			return (<div>{this.state.restaurants.map({item => <p>{item.name}, {item.address}</p>})}</div>);
		}
		
	}
}


// registering device
generate uniqueid from deviceId, projectId.
send uniqueid to the backend to save in any table(database - deviceType, uniqueid)

Raising Notifications: 


Opening Emulator
open cmd and open sdk tools path ... C:\Users\kamal\AppData\Local\Android\sdk\tools
emulator -list-avds
emulator @Nexus_6_API_26

bundle command is added below (open cmd at project level, run bundle command and make sure you are opened other cmd with npm start)
react-native bundle --platform android --dev false --entry-file index.js \  --bundle-output android/app/src/main/assets/index.android.bundle \  --assets-dest android/app/src/main/res/

APK folder 
..\project\android\app\build\outputs




















	